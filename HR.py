import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

st.title('üëÄ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with st.expander('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'):
    df = pd.read_csv('HR_gender.csv')
  
    st.write('**X**')
    X_raw = df.drop('left', axis=1)  # 'left' - —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ)
    X_raw

    st.write('**y**')
    y_raw = df['left']
    y_raw

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
with st.expander('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö'):
    st.scatter_chart(data=df, x='satisfaction_level', y='average_montly_hours', color='left')
    st.bar_chart(data=df['salary'].value_counts())

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
with st.sidebar:
    st.header('–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    satisfaction_level = st.slider('–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 0.0, 1.0, 0.5)
    last_evaluation = st.slider('–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω–∏–µ–π', 0.0, 1.0, 0.7)
    number_project = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤', 1, 7, 4)
    average_montly_hours = st.slider('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤', 96, 310, 200)
    time_spend_company = st.slider('–í—Ä–µ–º—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ (–ª–µ—Ç)', 1, 10, 3)
    Work_accident = st.selectbox('–ü—Ä–æ–∏—Å—Ö–æ–¥–∏–ª –ª–∏ –Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π –Ω–∞ —Ä–∞–±–æ—Ç–µ?', (0, 1))
    promotion_last_5years = st.selectbox('–ü–æ–≤—ã—à–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç?', (0, 1))
    sales = st.selectbox('–û—Ç–¥–µ–ª', df['sales'].unique())
    salary = st.selectbox('–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã', df['salary'].unique())
  
    # –°–æ–±–∏—Ä–∞–µ–º –≤–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
    data = {'satisfaction_level': satisfaction_level,
            'last_evaluation': last_evaluation,
            'number_project': number_project,
            'average_montly_hours': average_montly_hours,
            'time_spend_company': time_spend_company,
            'Work_accident': Work_accident,
            'promotion_last_5years': promotion_last_5years,
            'sales': sales,
            'salary': salary}
    input_df = pd.DataFrame(data, index=[0])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    input_data = pd.concat([input_df, X_raw], axis=0)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
encode = ['sales', 'salary']
input_data_encoded = pd.get_dummies(input_data, columns=encode)

# –û—Ç–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
X_input = input_data_encoded[:1]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
df_encoded = pd.get_dummies(X_raw, columns=encode)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X = df_encoded
y = y_raw
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ RandomForestClassifier —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º max_features
clf = RandomForestClassifier(n_estimators=7, max_features='sqrt', n_jobs=2, random_state=1)
clf.fit(X_train, y_train)

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
prediction = clf.predict(X_input)
prediction_proba = clf.predict_proba(X_input)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
st.subheader('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≤–æ–ª—å–Ω–µ–Ω–∏—è')
df_prediction_proba = pd.DataFrame(prediction_proba, columns=['–û—Å—Ç–∞–Ω–µ—Ç—Å—è', '–£–≤–æ–ª–∏—Ç—Å—è'])
st.dataframe(df_prediction_proba)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if prediction[0] == 1:
    st.success("–°–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–≤–æ–ª–∏—Ç—Å—è.")
else:
    st.success("–°–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.")
